package edu.uark.commands.employees;

<<<<<<< HEAD
import org.apache.commons.lang3.StringUtils;

import edu.uark.commands.ResultCommandInterface;
import edu.uark.controllers.exceptions.ConflictException;
import edu.uark.controllers.exceptions.UnprocessableEntityException;
import edu.uark.models.api.Employee;
import edu.uark.models.entities.EmployeeEntity;
import edu.uark.models.repositories.EmployeeRepository; // Will be done in 2.2
import edu.uark.models.repositories.interfaces.EmployeeRepositoryInterface;

public class EmployeeCreateCommand implements ResultCommandInterface<Employee> {
	//@Override
	/*public Employee execute() {
		Validations
		if (StringUtils.isBlank(this.apiEmployee.getLookupCode())) {
			throw new UnprocessableEntityException("lookupcode");
		}

		EmployeeEntity employeeEntity = this.employeeRepository.byLookupCode(this.apiEmployee.getLookupCode());
		if (employeeEntity != null) {
			throw new ConflictException("lookupcode"); //Lookupcode already defined for another employee.
		}
		
		//No ENTITY object was returned from the database, thus the API object's lookupcode must be unique.
		employeeEntity = new EmployeeEntity(apiEmployee); //Create a new ENTITY object from the API object details.
		employeeEntity.save(); //Write, via an INSERT, the new record to the database.
		
		this.apiEmployee.setId(employeeEntity.getId()); //Synchronize information generated by the database upon INSERT.

		return this.apiEmployee;
	}*/

=======
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;

import edu.uark.commands.ResultCommandInterface;
import edu.uark.controllers.exceptions.UnprocessableEntityException;
import edu.uark.models.api.Employee;
import edu.uark.models.entities.EmployeeEntity;
import edu.uark.models.repositories.EmployeeRepository;
import edu.uark.models.repositories.interfaces.EmployeeRepositoryInterface;

public class EmployeeCreateCommand implements ResultCommandInterface<Employee> {
	@Override
	public Employee execute() {
		//Validations
		if (StringUtils.isBlank(this.apiEmployee.getFirstName())) {
			throw new UnprocessableEntityException("first name");
		}
		if (StringUtils.isBlank(this.apiEmployee.getLastName())) {
			throw new UnprocessableEntityException("last name");
		}
		if (StringUtils.isBlank(this.apiEmployee.getPassword())) {
			throw new UnprocessableEntityException("password");
		}
		
		//Generate a numeric employee ID of length EMPLOYEE_ID_LENGTH for the new employee,
		// making sure that the employee ID is not already assigned to another employee.
		// This field is distinct from the record ID.
		String newEmployeeId;
		do {
			newEmployeeId = RandomStringUtils.randomNumeric(EMPLOYEE_ID_LENGTH);
		} while (this.employeeRepository.employeeIdExists(newEmployeeId));

		this.apiEmployee.setEmployeeId(newEmployeeId);

		EmployeeEntity employeeEntity = new EmployeeEntity(this.apiEmployee); //Create a new ENTITY object from the API object details.
		employeeEntity.save(); //Write, via an INSERT, the new record to the database.
		
		this.apiEmployee.setId(employeeEntity.getId()); //Synchronize information generated by the database upon INSERT.
		this.apiEmployee.setCreatedOn(employeeEntity.getCreatedOn());
		this.apiEmployee.setPassword(StringUtils.EMPTY); //Only send the password over the network when modifying the database.
		
		return this.apiEmployee;
	}
	
>>>>>>> dbac4282484eeb203aee2ea6d5c48dc55e9f8d67
	//Properties
	private Employee apiEmployee;
	public Employee getApiEmployee() {
		return this.apiEmployee;
	}
	public EmployeeCreateCommand setApiEmployee(Employee apiEmployee) {
		this.apiEmployee = apiEmployee;
		return this;
	}
	
	private EmployeeRepositoryInterface employeeRepository;
	public EmployeeRepositoryInterface getEmployeeRepository() {
		return this.employeeRepository;
	}
	public EmployeeCreateCommand setEmployeeRepository(EmployeeRepositoryInterface employeeRepository) {
		this.employeeRepository = employeeRepository;
		return this;
	}
	
<<<<<<< HEAD
	public EmployeeCreateCommand() {
		this.employeeRepository = new EmployeeRepository(); // Will be done in 2.2
=======
	private static final int EMPLOYEE_ID_LENGTH = 4;
	
	public EmployeeCreateCommand() {
		this.employeeRepository = new EmployeeRepository();
>>>>>>> dbac4282484eeb203aee2ea6d5c48dc55e9f8d67
	}
}
